import numpy as np
import os
from numpy import int16, int32
from scipy import signal
from scipy.signal.windows import hann
from scipy.signal import convolve
from scipy import interpolate
from scipy.io import wavfile


def load(file, wav_calib=None):
    if file[-3:] == "wav" or file[-3:] == "WAV":
        fs, signal = wavfile.read(file)

    if wav_calib is None:
        wav_calib = 1.0
        print("[Info] A calibration of 1 Pa/FS is considered")

    if signal.dtype == int16:
        signal = wav_calib * signal / (2**15 - 1)
    elif signal.dtype == int32:
        signal = wav_calib * signal / (2**31 - 1)
    elif signal.dtype == float:
        signal = wav_calib * signal

    return signal, fs


def sone_to_phon_tv2018(sone):
    """
    Convert sone values to phon using the TV2018 conversion table.

    Parameters:
    - sone: float or np.array, input sone value(s)

    Returns:
    - float or np.array, corresponding phon value(s)
    """
    # Define the sone-phon conversion table
    sone_phon = np.array(
        [
            [0.000546619612323418, 0.0],
            [0.000575377744992206, 0.1],
            [0.000605570447120010, 0.2],
            [0.000637263724538867, 0.3],
            [0.000670526241942513, 0.4],
            [0.000705429405390654, 0.5],
            [0.000742047445830121, 0.6],
            [0.000780457503543359, 0.7],
            [0.000820739713428071, 0.8],
            [0.000862977291004271, 0.9],
            [0.000907256619037440, 1.0],
            [0.000953667334659858, 1.1],
            [0.00100230241686376, 1.2],
            [0.00105325827423329, 1.3],
            [0.00110663483277465, 1.4],
            [0.00116253562369619, 1.5],
            [0.00122106787098303, 1.6],
            [0.00128234257860437, 1.7],
            [0.00134647461718337, 1.8],
            [0.00141358280995387, 1.9],
            [0.00148379001782116, 2.0],
            [0.00155722322333813, 2.1],
            [0.00163401361340152, 2.2],
            [0.00171429666046856, 2.3],
            [0.00179821220208799, 2.4],
            [0.00188590451853614, 2.5],
            [0.00197752240834304, 2.6],
            [0.00207321926149119, 2.7],
            [0.00217315313006639, 2.8],
            [0.00227748679613690, 2.9],
            [0.00238638783663640, 3.0],
            [0.00250002868502460, 3.1],
            [0.00261858668949969, 3.2],
            [0.00274224416753640, 3.3],
            [0.00287118845652584, 3.4],
            [0.00300561196029488, 3.5],
            [0.00314571219128564, 3.6],
            [0.00329169180818021, 3.7],
            [0.00344375864876002, 3.8],
            [0.00360212575779538, 3.9],
            [0.00376701140976689, 4.0],
            [0.00393863912622887, 4.1],
            [0.00411723768763176, 4.2],
            [0.00430304113943317, 4.3],
            [0.00449628879233258, 4.4],
            [0.00469722521648123, 4.5],
            [0.00490610022952805, 4.6],
            [0.00512316887837402, 4.7],
            [0.00534869141452536, 4.8],
            [0.00558293326294694, 4.9],
            [0.00582616498433302, 5.0],
            [0.00607866223073008, 5.1],
            [0.00634070569446220, 5.2],
            [0.00661258105032451, 5.3],
            [0.00689457889103276, 5.4],
            [0.00718699465592854, 5.5],
            [0.00749012855296477, 5.6],
            [0.00780428547400979, 5.7],
            [0.00812977490352937, 5.8],
            [0.00846691082072539, 5.9],
            [0.00881601159522819, 6.0],
            [0.00916457874117185, 6.1],
            [0.00948990400454546, 6.2],
            [0.00982597687466838, 6.3],
            [0.0101730829736007, 6.4],
            [0.0105315119330279, 6.5],
            [0.0109015573047298, 6.6],
            [0.0112417840128657, 6.7],
            [0.0115855454915330, 6.8],
            [0.0119395617938668, 6.9],
            [0.0122768029128052, 7.0],
            [0.0126029599556348, 7.1],
            [0.0129379610696557, 7.2],
            [0.0132820265081358, 7.3],
            [0.0136353802248631, 7.4],
            [0.0139982498445277, 7.5],
            [0.0143708666290046, 7.6],
            [0.0147534654395354, 7.7],
            [0.0151462846948155, 7.8],
            [0.0155495663249966, 7.9],
            [0.0159635557216384, 8.0],
            [0.0163885016836416, 8.1],
            [0.0168246563592110, 8.2],
            [0.0172722751839128, 8.3],
            [0.0177316168148894, 8.4],
            [0.0182029430613163, 8.5],
            [0.0186865188111922, 8.6],
            [0.0191497619078641, 8.7],
            [0.0196078188425621, 8.8],
            [0.0200766081744669, 8.9],
            [0.0205505783051334, 9.0],
            [0.0209933978177736, 9.1],
            [0.0214454612115416, 9.2],
            [0.0219069523692241, 9.3],
            [0.0223780582186518, 9.4],
            [0.0228589687376307, 9.5],
            [0.0233498769561956, 9.6],
            [0.0238509789561703, 9.7],
            [0.0243624738677045, 9.8],
            [0.0248845638632465, 9.9],
            [0.0254174541483766, 10.0],
            [0.0259613529497192, 10.1],
            [0.0265164714998363, 10.2],
            [0.0270830240190725, 10.3],
            [0.0276612276943315, 10.4],
            [0.0282513026547643, 10.5],
            [0.0288534719443673, 10.6],
            [0.0294679614914912, 10.7],
            [0.0300950000752697, 10.8],
            [0.0307348192889919, 10.9],
            [0.0313876535004492, 11.0],
            [0.0320537398092870, 11.1],
            [0.0327333180014199, 11.2],
            [0.0334266305005563, 11.3],
            [0.0341339223170900, 11.4],
            [0.0348554409940448, 11.5],
            [0.0355914365493069, 11.6],
            [0.0363421614177353, 11.7],
            [0.0371078703888724, 11.8],
            [0.0378796898680216, 11.9],
            [0.0385813173524940, 12.0],
            [0.0392902218781168, 12.1],
            [0.0400104581390101, 12.2],
            [0.0407421863558398, 12.3],
            [0.0414855692891786, 12.4],
            [0.0422407722777666, 12.5],
            [0.0430079632750939, 12.6],
            [0.0437873128841738, 12.7],
            [0.0445789943903560, 12.8],
            [0.0453831837920482, 12.9],
            [0.0462000598292090, 13.0],
            [0.0470298040094831, 13.1],
            [0.0478726006320599, 13.2],
            [0.0487286368086228, 13.3],
            [0.0495981024807539, 13.4],
            [0.0504811904367583, 13.5],
            [0.0513780963237501, 13.6],
            [0.0522890186572326, 13.7],
            [0.0532141588275779, 13.8],
            [0.0541537211033423, 13.9],
            [0.0551079126313594, 14.0],
            [0.0560769434335432, 14.1],
            [0.0570610264003734, 14.2],
            [0.0580603772810269, 14.3],
            [0.0590752146701342, 14.4],
            [0.0601057599911548, 14.5],
            [0.0611522374763697, 14.6],
            [0.0622148741435181, 14.7],
            [0.0632938997690818, 14.8],
            [0.0643895468582801, 14.9],
            [0.0655020506118056, 15.0],
            [0.0666316488893683, 15.1],
            [0.0677785821701189, 15.2],
            [0.0689430935100304, 15.3],
            [0.0700839999898166, 15.4],
            [0.0712346955192603, 15.5],
            [0.0724015097955892, 15.6],
            [0.0735846474532652, 15.7],
            [0.0747843157055563, 15.8],
            [0.0759727444971956, 15.9],
            [0.0771521466342983, 16.0],
            [0.0783460765814937, 16.1],
            [0.0795546879386369, 16.2],
            [0.0807781371721948, 16.3],
            [0.0820165836726276, 16.4],
            [0.0832701898096529, 16.5],
            [0.0845391209851955, 16.6],
            [0.0858235456838613, 16.7],
            [0.0871236355207871, 16.8],
            [0.0884395652866857, 16.9],
            [0.0897715129899510, 17.0],
            [0.0911196598956628, 17.1],
            [0.0924841905613550, 17.2],
            [0.0938652928694229, 17.3],
            [0.0952631580573887, 17.4],
            [0.0966779807429843, 17.5],
            [0.0981099589383456, 17.6],
            [0.0995592940777068, 17.7],
            [0.101026191027549, 17.8],
            [0.102510858096484, 17.9],
            [0.104013507041105, 18.0],
            [0.105534353067749, 18.1],
            [0.107073614830141, 18.2],
            [0.108631514422891, 18.3],
            [0.110208277370855, 18.4],
            [0.111804132614322, 18.5],
            [0.113419312490108, 18.6],
            [0.115054052708526, 18.7],
            [0.116708592326337, 18.8],
            [0.118383173715696, 18.9],
            [0.120078042529201, 19.0],
            [0.121793447661120, 19.1],
            [0.123485712288382, 19.2],
            [0.125193126909954, 19.3],
            [0.126919637636664, 19.4],
            [0.128665457637548, 19.5],
            [0.130430803335760, 19.6],
            [0.132215894398508, 19.7],
            [0.134020953724054, 19.8],
            [0.135817774552322, 19.9],
            [0.137607305657811, 20.0],
            [0.139414639418691, 20.1],
            [0.141239939917634, 20.2],
            [0.143083374787600, 20.3],
            [0.144945115277068, 20.4],
            [0.146825336312764, 20.5],
            [0.148724216559660, 20.6],
            [0.150641938478069, 20.7],
            [0.152578688377651, 20.8],
            [0.154534656468117, 20.9],
            [0.156510036906503, 21.0],
            [0.158505027840770, 21.1],
            [0.160519831449642, 21.2],
            [0.162554653978484, 21.3],
            [0.164609705771050, 21.4],
            [0.166685201297042, 21.5],
            [0.168781359175261, 21.6],
            [0.170898402192323, 21.7],
            [0.173036557316777, 21.8],
            [0.175196055708581, 21.9],
            [0.177377132723847, 22.0],
            [0.179580027914809, 22.1],
            [0.181804985024971, 22.2],
            [0.184052251979406, 22.3],
            [0.186322080870221, 22.4],
            [0.188614727937197, 22.5],
            [0.190930453543590, 22.6],
            [0.193269522147210, 22.7],
            [0.195632202266779, 22.8],
            [0.198018766443691, 22.9],
            [0.200429491199233, 23.0],
            [0.202864656987424, 23.1],
            [0.205318083760612, 23.2],
            [0.207754857044603, 23.3],
            [0.210214767712110, 23.4],
            [0.212698062990927, 23.5],
            [0.215204993965860, 23.6],
            [0.217716708784575, 23.7],
            [0.220213855594719, 23.8],
            [0.222732351296597, 23.9],
            [0.225272382134414, 24.0],
            [0.227834138555109, 24.1],
            [0.230417815285597, 24.2],
            [0.233023611407209, 24.3],
            [0.235651730427081, 24.4],
            [0.238302380346237, 24.5],
            [0.240975773724150, 24.6],
            [0.243672127739482, 24.7],
            [0.246391664246817, 24.8],
            [0.249134609829135, 24.9],
            [0.251901195845809, 25.0],
            [0.254691658475913, 25.1],
            [0.257506238756660, 25.2],
            [0.260345182618589, 25.3],
            [0.263208740925966, 25.4],
            [0.266097169452133, 25.5],
            [0.269010728947290, 25.6],
            [0.271949685132737, 25.7],
            [0.274914308706805, 25.8],
            [0.277904875344294, 25.9],
            [0.280921665691076, 26.0],
            [0.283964965352032, 26.1],
            [0.287035064873229, 26.2],
            [0.290132259718133, 26.3],
            [0.293256850237904, 26.4],
            [0.296409141635805, 26.5],
            [0.299589443925830, 26.6],
            [0.302798071885563, 26.7],
            [0.306035345003482, 26.8],
            [0.309301587420762, 26.9],
            [0.312597127867764, 27.0],
            [0.315922299595369, 27.1],
            [0.319275263165553, 27.2],
            [0.322601855776064, 27.3],
            [0.325955857546322, 27.4],
            [0.329336473524717, 27.5],
            [0.332698199680911, 27.6],
            [0.336085972439896, 27.7],
            [0.339500019358067, 27.8],
            [0.342940572935175, 27.9],
            [0.346407870691179, 28.0],
            [0.349902155238988, 28.1],
            [0.353423674352872, 28.2],
            [0.356972681032245, 28.3],
            [0.360549433560544, 28.4],
            [0.364154195558926, 28.5],
            [0.367787236034580, 28.6],
            [0.371448829423403, 28.7],
            [0.375139255626803, 28.8],
            [0.378858800042500, 28.9],
            [0.382607753589038, 29.0],
            [0.386386412723992, 29.1],
            [0.390195079455619, 29.2],
            [0.394034061347919, 29.3],
            [0.397903671518963, 29.4],
            [0.401804228632511, 29.5],
            [0.405736056882785, 29.6],
            [0.409699485972475, 29.7],
            [0.413694851083951, 29.8],
            [0.417722492843747, 29.9],
            [0.421782757280372, 30.0],
            [0.425875995775564, 30.1],
            [0.430002565009126, 30.2],
            [0.434162826897440, 30.3],
            [0.438332886300627, 30.4],
            [0.442500107922811, 30.5],
            [0.446698694893564, 30.6],
            [0.450928933987604, 30.7],
            [0.455191117417822, 30.8],
            [0.459485542891882, 30.9],
            [0.463812513664061, 31.0],
            [0.468172338582062, 31.1],
            [0.472565332128602, 31.2],
            [0.476991814457484, 31.3],
            [0.481452111424072, 31.4],
            [0.485946554609799, 31.5],
            [0.490475481340707, 31.6],
            [0.495039234699744, 31.7],
            [0.499638163532759, 31.8],
            [0.504272622448029, 31.9],
            [0.508942971809271, 32.0],
            [0.513609450295260, 32.1],
            [0.518303030756331, 32.2],
            [0.523031414853746, 32.3],
            [0.527794937516378, 32.4],
            [0.532593939550177, 32.5],
            [0.537428767640656, 32.6],
            [0.542299774348860, 32.7],
            [0.547207318100935, 32.8],
            [0.552151763171184, 32.9],
            [0.557133479658747, 33.0],
            [0.562152843457967, 33.1],
            [0.567210236222544, 33.2],
            [0.572270574250476, 33.3],
            [0.577341909381370, 33.4],
            [0.582448860809508, 33.5],
            [0.587591731421863, 33.6],
            [0.592770830224544, 33.7],
            [0.597986472439323, 33.8],
            [0.603238979595269, 33.9],
            [0.608528679615033, 34.0],
            [0.613855906895268, 34.1],
            [0.619221002381122, 34.2],
            [0.624624313634118, 34.3],
            [0.630066194893433, 34.4],
            [0.635547007129999, 34.5],
            [0.641067118093322, 34.6],
            [0.646626902350734, 34.7],
            [0.652226741318733, 34.8],
            [0.657867023286406, 34.9],
            [0.663548143430604, 35.0],
            [0.669270503822899, 35.1],
            [0.675034513427786, 35.2],
            [0.680840588092851, 35.3],
            [0.686689150530138, 35.4],
            [0.692580630289022, 35.5],
            [0.698515463720617, 35.6],
            [0.704494093933757, 35.7],
            [0.710516970742692, 35.8],
            [0.716584550606597, 35.9],
            [0.722697296561135, 36.0],
            [0.728837198309438, 36.1],
            [0.734977649725156, 36.2],
            [0.741160930800747, 36.3],
            [0.747387419815989, 36.4],
            [0.753657501816155, 36.5],
            [0.759971568691756, 36.6],
            [0.766330019252432, 36.7],
            [0.772690963015353, 36.8],
            [0.779089653646598, 36.9],
            [0.785531762068731, 37.0],
            [0.792017667133220, 37.1],
            [0.798547755139432, 37.2],
            [0.805122419915788, 37.3],
            [0.811742062892992, 37.4],
            [0.818407093168763, 37.5],
            [0.825117927563987, 37.6],
            [0.831874990669895, 37.7],
            [0.838678714886037, 37.8],
            [0.845529540448923, 37.9],
            [0.852427915451068, 38.0],
            [0.859374295850510, 38.1],
            [0.866369145470441, 38.2],
            [0.873412935989215, 38.3],
            [0.880506146920598, 38.4],
            [0.887649265584241, 38.5],
            [0.894842787066786, 38.6],
            [0.902087214173148, 38.7],
            [0.909344156919816, 38.8],
            [0.916624788376815, 38.9],
            [0.923953857773440, 39.0],
            [0.931331778338297, 39.1],
            [0.938758971432198, 39.2],
            [0.946235866667784, 39.3],
            [0.953762902021541, 39.4],
            [0.961340523937791, 39.5],
            [0.968969187424072, 39.6],
            [0.976649356137512, 39.7],
            [0.984381502461756, 39.8],
            [0.992166107573986, 39.9],
            [1.00000366150176, 40.0],
            [1.00789466316924, 40.1],
            [1.01583962043265, 40.2],
            [1.02383905010457, 40.3],
            [1.03189347796698, 40.4],
            [1.04000343877297, 40.5],
            [1.04816947623678, 40.6],
            [1.05639214301243, 40.7],
            [1.06467200066072, 40.8],
            [1.07300961960480, 40.9],
            [1.08140557907440, 41.0],
            [1.08986046703883, 41.1],
            [1.09837357939878, 41.2],
            [1.10688167471134, 41.3],
            [1.11544636408779, 41.4],
            [1.12406814000075, 41.5],
            [1.13272782401805, 41.6],
            [1.14141655038203, 41.7],
            [1.15016171292179, 41.8],
            [1.15896379227310, 41.9],
            [1.16782327869512, 42.0],
            [1.17674067220382, 42.1],
            [1.18571648269516, 42.2],
            [1.19475123005668, 42.3],
            [1.20384544426882, 42.4],
            [1.21299966549355, 42.5],
            [1.22221444415064, 42.6],
            [1.23149034098134, 42.7],
            [1.24082792709932, 42.8],
            [1.25022778402644, 42.9],
            [1.25969050371707, 43.0],
            [1.26921668856786, 43.1],
            [1.27880695141357, 43.2],
            [1.28846191550879, 43.3],
            [1.29818221449628, 43.4],
            [1.30796849236128, 43.5],
            [1.31779046840431, 43.6],
            [1.32764026311061, 43.7],
            [1.33755356373100, 43.8],
            [1.34753091396457, 43.9],
            [1.35757286838547, 44.0],
            [1.36767999260880, 44.1],
            [1.37785286344499, 44.2],
            [1.38809206904217, 44.3],
            [1.39839820901575, 44.4],
            [1.40877189456427, 44.5],
            [1.41921374857127, 44.6],
            [1.42972440569231, 44.7],
            [1.44030451242669, 44.8],
            [1.45095472717349, 44.9],
            [1.46167572027149, 45.0],
            [1.47246817402269, 45.1],
            [1.48333278269899, 45.2],
            [1.49427025253263, 45.3],
            [1.50528130168898, 45.4],
            [1.51636666022311, 45.5],
            [1.52752707001988, 45.6],
            [1.53876328471716, 45.7],
            [1.55001803831664, 45.8],
            [1.56133416497564, 45.9],
            [1.57272367149122, 46.0],
            [1.58418720580836, 46.1],
            [1.59572542819412, 46.2],
            [1.60733901139729, 46.3],
            [1.61902864079466, 46.4],
            [1.63079501452246, 46.5],
            [1.64259862807812, 46.6],
            [1.65447096654073, 46.7],
            [1.66642001795421, 46.8],
            [1.67844648420341, 46.9],
            [1.69055108060459, 47.0],
            [1.70273453598511, 47.1],
            [1.71499759274481, 47.2],
            [1.72734100689841, 47.3],
            [1.73976554809879, 47.4],
            [1.75227199964125, 47.5],
            [1.76486115844809, 47.6],
            [1.77753383503483, 47.7],
            [1.79024198043869, 47.8],
            [1.80300897140893, 47.9],
            [1.81585702367234, 48.0],
            [1.82878683835308, 48.1],
            [1.84179913098073, 48.2],
            [1.85489463171474, 48.3],
            [1.86807408555216, 48.4],
            [1.88133825251713, 48.5],
            [1.89468790783132, 48.6],
            [1.90812384206429, 48.7],
            [1.92164686126279, 48.8],
            [1.93525778705835, 48.9],
            [1.94895745675240, 49.0],
            [1.96274672337836, 49.1],
            [1.97662645574034, 49.2],
            [1.99059753842805, 49.3],
            [2.00466087180792, 49.4],
            [2.01881737198989, 49.5],
            [2.03306797077059, 49.6],
            [2.04736824111959, 49.7],
            [2.06173289539555, 49.8],
            [2.07618931033230, 49.9],
            [2.09073830366097, 50.0],
            [2.10538070959901, 50.1],
            [2.12011737907757, 50.2],
            [2.13494917994776, 50.3],
            [2.14987699716481, 50.4],
            [2.16490173294948, 50.5],
            [2.18002430692487, 50.6],
            [2.19524565622848, 50.7],
            [2.21056673559816, 50.8],
            [2.22598851743178, 50.9],
            [2.24151199181978, 51.0],
            [2.25713816655031, 51.1],
            [2.27286806708704, 51.2],
            [2.28870273651926, 51.3],
            [2.30462930417032, 51.4],
            [2.32058488562035, 51.5],
            [2.33661002379964, 51.6],
            [2.35273654715846, 51.7],
            [2.36896535064820, 51.8],
            [2.38529734802399, 51.9],
            [2.40173347212599, 52.0],
            [2.41827467513575, 52.1],
            [2.43492192880598, 52.2],
            [2.45167622466274, 52.3],
            [2.46853857417846, 52.4],
            [2.48551000891500, 52.5],
            [2.50259158070124, 52.6],
            [2.51978436153536, 52.7],
            [2.53708944377901, 52.8],
            [2.55450794015591, 52.9],
            [2.57204098372033, 53.0],
            [2.58964710274044, 53.1],
            [2.60733242548166, 53.2],
            [2.62513011883546, 53.3],
            [2.64304119637441, 53.4],
            [2.66106669316771, 53.5],
            [2.67920766609732, 53.6],
            [2.69746519414482, 53.7],
            [2.71584037864701, 53.8],
            [2.73433434351825, 53.9],
            [2.75294823543904, 54.0],
            [2.77168322400879, 54.1],
            [2.79054050186241, 54.2],
            [2.80952128474973, 54.3],
            [2.82862681157703, 54.4],
            [2.84785834441087, 54.5],
            [2.86720307536391, 54.6],
            [2.88661071596882, 54.7],
            [2.90614244099958, 54.8],
            [2.92579939191861, 54.9],
            [2.94558273447040, 55.0],
            [2.96549365903657, 55.1],
            [2.98553338095712, 55.2],
            [3.00570314081562, 55.3],
            [3.02600420468647, 55.4],
            [3.04643786434302, 55.5],
            [3.06700543742485, 55.6],
            [3.08770826756365, 55.7],
            [3.10854772446613, 55.8],
            [3.12952520395430, 55.9],
            [3.15064212796247, 56.0],
            [3.17184726523014, 56.1],
            [3.19316311700436, 56.2],
            [3.21461664258518, 56.3],
            [3.23616301675399, 56.4],
            [3.25784583368584, 56.5],
            [3.27966809707688, 56.6],
            [3.30163114356945, 56.7],
            [3.32373633869536, 56.8],
            [3.34598507718023, 56.9],
            [3.36837878320311, 57.0],
            [3.39091891060949, 57.1],
            [3.41360694307724, 57.2],
            [3.43644439423395, 57.3],
            [3.45943277907748, 57.4],
            [3.48249179354212, 57.5],
            [3.50569866921912, 57.6],
            [3.52905480149098, 57.7],
            [3.55256161745748, 57.8],
            [3.57622057647391, 57.9],
            [3.60003317063569, 58.0],
            [3.62400092521638, 58.1],
            [3.64812539905761, 58.2],
            [3.67240818490857, 58.3],
            [3.69685090971298, 58.4],
            [3.72145523484334, 58.5],
            [3.74622285628079, 58.6],
            [3.77113970710331, 58.7],
            [3.79615450667301, 58.8],
            [3.82133135001473, 58.9],
            [3.84667182187477, 59.0],
            [3.87217754391155, 59.1],
            [3.89785017531069, 59.2],
            [3.92369141334975, 59.3],
            [3.94970299390861, 59.4],
            [3.97588669192378, 59.5],
            [4.00224432178409, 59.6],
            [4.02877773766567, 59.7],
            [4.05548883380557, 59.8],
            [4.08237731037663, 59.9],
            [4.10936447601656, 60.0],
            [4.13652850072571, 60.1],
            [4.16387117656303, 60.2],
            [4.19139433837875, 60.3],
            [4.21909986453643, 60.4],
            [4.24698967757319, 60.5],
            [4.27506574479467, 60.6],
            [4.30330052435986, 60.7],
            [4.33170589270292, 60.8],
            [4.36030148898207, 60.9],
            [4.38908941546769, 61.0],
            [4.41801801336634, 61.1],
            [4.44710640882856, 61.2],
            [4.47638659486162, 61.3],
            [4.50586058722006, 61.4],
            [4.53553045186414, 61.5],
            [4.56539830573935, 61.6],
            [4.59546631751968, 61.7],
            [4.62573670783142, 61.8],
            [4.65621175012692, 61.9],
            [4.68689377092523, 62.0],
            [4.71778515008548, 62.1],
            [4.74881960073942, 62.2],
            [4.78004363500535, 62.3],
            [4.81147707748934, 62.4],
            [4.84312223448421, 62.5],
            [4.87498146875262, 62.6],
            [4.90705720008136, 62.7],
            [4.93935190571154, 62.8],
            [4.97186812063858, 62.9],
            [5.00460843777707, 63.0],
            [5.03757550798504, 63.1],
            [5.07071430996607, 63.2],
            [5.10404931433539, 63.3],
            [5.13761179795493, 63.4],
            [5.17140434125643, 63.5],
            [5.20542958403783, 63.6],
            [5.23969022563422, 63.7],
            [5.27418902493509, 63.8],
            [5.30892880024487, 63.9],
            [5.34391242898139, 64.0],
            [5.37912521003156, 64.1],
            [5.41447694445034, 64.2],
            [5.45006143762715, 64.3],
            [5.48589176477706, 64.4],
            [5.52197073203261, 64.5],
            [5.55830120385831, 64.6],
            [5.59488610278248, 64.7],
            [5.63172840897905, 64.8],
            [5.66883115970112, 64.9],
            [5.70612521891527, 65.0],
            [5.74366260277930, 65.1],
            [5.78146211368659, 65.2],
            [5.81952669502720, 65.3],
            [5.85785934562048, 65.4],
            [5.89646311944701, 65.5],
            [5.93532535000264, 65.6],
            [5.97439265423288, 65.7],
            [6.01373337348208, 65.8],
            [6.05335047282080, 65.9],
            [6.09320433058122, 66.0],
            [6.13323257877888, 66.1],
            [6.17353112017508, 66.2],
            [6.21410653733769, 66.3],
            [6.25494969841770, 66.4],
            [6.29601819040272, 66.5],
            [6.33736728842861, 66.6],
            [6.37899970867818, 66.7],
            [6.42091821936379, 66.8],
            [6.46312564198485, 66.9],
            [6.50562485257915, 67.0],
            [6.54837279484049, 67.1],
            [6.59141421065883, 67.2],
            [6.63475414692057, 67.3],
            [6.67839291943775, 67.4],
            [6.72226709878217, 67.5],
            [6.76644401731823, 67.6],
            [6.81092670053699, 67.7],
            [6.85571823565014, 67.8],
            [6.90082177309689, 67.9],
            [6.94624052803376, 68.0],
            [6.99197778180316, 68.1],
            [7.03803688337456, 68.2],
            [7.08436258015537, 68.3],
            [7.13099760239176, 68.4],
            [7.17795934635615, 68.5],
            [7.22525120835571, 68.6],
            [7.27287665657140, 68.7],
            [7.32083923273193, 68.8],
            [7.36908777582092, 68.9],
            [7.41761006821905, 69.0],
            [7.46647284119827, 69.1],
            [7.51567965985302, 69.2],
            [7.56523416787583, 69.3],
            [7.61514008959868, 69.4],
            [7.66539530728349, 69.5],
            [7.71592238935719, 69.6],
            [7.76680222187906, 69.7],
            [7.81799362158049, 69.8],
            [7.86952063918908, 69.9],
            [7.92141202323240, 70.0],
            [7.97367171880767, 70.1],
            [8.02630376102671, 70.2],
            [8.07931227722867, 70.3],
            [8.13270148855865, 70.4],
            [8.18645557813350, 70.5],
            [8.24050696375481, 70.6],
            [8.29492720068837, 70.7],
            [8.34973710060666, 70.8],
            [8.40494103210845, 70.9],
            [8.46050839270196, 71.0],
            [8.51638204404280, 71.1],
            [8.57260269654547, 71.2],
            [8.62922397983362, 71.3],
            [8.68625032009238, 71.4],
            [8.74368624324848, 71.5],
            [8.80153637609301, 71.6],
            [8.85980544717382, 71.7],
            [8.91849828744061, 71.8],
            [8.97755769354494, 71.9],
            [9.03702292968169, 72.0],
            [9.09691975453891, 72.1],
            [9.15725307532528, 72.2],
            [9.21800890847795, 72.3],
            [9.27915570364131, 72.4],
            [9.34064119542953, 72.5],
            [9.40256392773981, 72.6],
            [9.46493594459976, 72.7],
            [9.52775249372732, 72.8],
            [9.59094283048071, 72.9],
            [9.65455047205098, 73.0],
            [9.71851948577752, 73.1],
            [9.78293604455047, 73.2],
            [9.84781590862806, 73.3],
            [9.91316393042215, 73.4],
            [9.97898503773028, 73.5],
            [10.0452398297497, 73.6],
            [10.1119277200902, 73.7],
            [10.1790957779981, 73.8],
            [10.2467488274158, 73.9],
            [10.3147647934275, 74.0],
            [10.3832284635842, 74.1],
            [10.4521346321379, 74.2],
            [10.5214312112003, 74.3],
            [10.5912122429864, 74.4],
            [10.6614817867824, 74.5],
            [10.7322439487762, 74.6],
            [10.8035028832149, 74.7],
            [10.8752627936505, 74.8],
            [10.9475279342764, 74.9],
            [11.0203026113602, 75.0],
            [11.0935593282651, 75.1],
            [11.1672971050818, 75.2],
            [11.2415082028759, 75.3],
            [11.3162399715878, 75.4],
            [11.3914967620901, 75.5],
            [11.4672829830687, 75.6],
            [11.5436031033281, 75.7],
            [11.6204616542462, 75.8],
            [11.6978632323838, 75.9],
            [11.7757906241924, 76.0],
            [11.8542326150535, 76.1],
            [11.9332283082149, 76.2],
            [12.0127824517558, 76.3],
            [12.0928535463352, 76.4],
            [12.1734891972592, 76.5],
            [12.2546958103384, 76.6],
            [12.3364784173863, 76.7],
            [12.4188421436566, 76.8],
            [12.5017922123630, 76.9],
            [12.5853248694851, 77.0],
            [12.6693994381314, 77.1],
            [12.7540724393563, 77.2],
            [12.8393355213370, 77.3],
            [12.9251573401375, 77.4],
            [13.0115901407714, 77.5],
            [13.0986395855202, 77.6],
            [13.1863114689479, 77.7],
            [13.2745781810742, 77.8],
            [13.3634448719358, 77.9],
            [13.4529476466245, 78.0],
            [13.5430926856906, 78.1],
            [13.6338863322842, 78.2],
            [13.7253351004022, 78.3],
            [13.8174456834409, 78.4],
            [13.9102249630543, 78.5],
            [14.0036463958741, 78.6],
            [14.0977095652811, 78.7],
            [14.1924577305953, 78.8],
            [14.2878817044659, 78.9],
            [14.3839475810509, 79.0],
            [14.4807158204522, 79.1],
            [14.5781943086873, 79.2],
            [14.6763669553245, 79.3],
            [14.7752125252972, 79.4],
            [14.8747874729574, 79.5],
            [14.9751004669624, 79.6],
            [15.0761604753964, 79.7],
            [15.1779767798232, 79.8],
            [15.2805128162861, 79.9],
            [15.3837385876634, 80.0],
            [15.4877389395035, 80.1],
            [15.5924461438921, 80.2],
            [15.6979404252483, 80.3],
            [15.8042358125212, 80.4],
            [15.9113307394742, 80.5],
            [16.0191727539480, 80.6],
            [16.1278423545736, 80.7],
            [16.2373514544908, 80.8],
            [16.3476793912932, 80.9],
            [16.4588093447852, 81.0],
            [16.5708035323508, 81.1],
            [16.6835910948661, 81.2],
            [16.7972664481206, 81.3],
            [16.9118435569676, 81.4],
            [17.0272796246014, 81.5],
            [17.1435998508288, 81.6],
            [17.2608282651904, 81.7],
            [17.3789347411808, 81.8],
            [17.4980002290958, 81.9],
            [17.6179683243346, 82.0],
            [17.7388903643953, 82.1],
            [17.8607768896221, 82.2],
            [17.9836046750309, 82.3],
            [18.1074260170482, 82.4],
            [18.2322084204381, 82.5],
            [18.3580318740717, 82.6],
            [18.4848207959366, 82.7],
            [18.6126541914278, 82.8],
            [18.7414998832473, 82.9],
            [18.8714121384839, 83.0],
            [19.0023673316465, 83.1],
            [19.1343736546832, 83.2],
            [19.2674891489047, 83.3],
            [19.4016491831686, 83.4],
            [19.5369211132946, 83.5],
            [19.6733125991092, 83.6],
            [19.8107396750745, 83.7],
            [19.9492975969999, 83.8],
            [20.0889908873313, 83.9],
            [20.2298109606897, 84.0],
            [20.3717581152818, 84.1],
            [20.5148517816751, 84.2],
            [20.6590971708740, 84.3],
            [20.8044923246048, 84.4],
            [20.9510362163520, 84.5],
            [21.0987289045264, 84.6],
            [21.2475667946976, 84.7],
            [21.3975457818241, 84.8],
            [21.5486614240614, 84.9],
            [21.7009074640099, 85.0],
            [21.8542762344724, 85.1],
            [22.0087587296979, 85.2],
            [22.1644401999321, 85.3],
            [22.3213817577645, 85.4],
            [22.4795931615346, 85.5],
            [22.6390840799260, 85.6],
            [22.7998640916015, 85.7],
            [22.9619426856408, 85.8],
            [23.1253292627836, 85.9],
            [23.2900331374855, 86.0],
            [23.4560635407669, 86.1],
            [23.6234296238413, 86.2],
            [23.7921404624986, 86.3],
            [23.9622050621998, 86.4],
            [24.1336323638537, 86.5],
            [24.3064312502144, 86.6],
            [24.4806105528537, 86.7],
            [24.6561790596450, 86.8],
            [24.8331455226963, 86.9],
            [25.0115186666620, 87.0],
            [25.1913071973729, 87.1],
            [25.3724804629396, 87.2],
            [25.5550761107105, 87.3],
            [25.7391110221263, 87.4],
            [25.9245938688291, 87.5],
            [26.1115333493120, 87.6],
            [26.2999381980558, 87.7],
            [26.4898171945353, 87.8],
            [26.6811791720327, 87.9],
            [26.8740330262274, 88.0],
            [27.0683877235086, 88.1],
            [27.2642523089914, 88.2],
            [27.4616359141924, 88.3],
            [27.6605477643602, 88.4],
            [27.8609971854240, 88.5],
            [28.0629936105672, 88.6],
            [28.2665465864029, 88.7],
            [28.4716657787579, 88.8],
            [28.6783609780623, 88.9],
            [28.8866421043506, 89.0],
            [29.0965192118804, 89.1],
            [29.3080024933814, 89.2],
            [29.5211022839453, 89.3],
            [29.7358290645749, 89.4],
            [29.9521934654014, 89.5],
            [30.1702062685968, 89.6],
            [30.3898784109917, 89.7],
            [30.6112209864204, 89.8],
            [30.8342452478141, 89.9],
            [31.0589626090558, 90.0],
            [31.2853846466239, 90.1],
            [31.5135231010319, 90.2],
            [31.7433687165956, 90.3],
            [31.9749268142972, 90.4],
            [32.2082353329498, 90.5],
            [32.4433066306685, 90.6],
            [32.6801532346867, 90.7],
            [32.9187878420142, 90.8],
            [33.1592233200117, 90.9],
            [33.4014727068915, 91.0],
            [33.6455492121473, 91.1],
            [33.8914662169460, 91.2],
            [34.1392372744574, 91.3],
            [34.3888761101669, 91.4],
            [34.6403966221518, 91.5],
            [34.8938128813429, 91.6],
            [35.1491391317726, 91.7],
            [35.4063897908199, 91.8],
            [35.6655794494500, 91.9],
            [35.9267228724663, 92.0],
            [36.1898349987612, 92.1],
            [36.4549309415883, 92.2],
            [36.7220259888423, 92.3],
            [36.9911356033709, 92.4],
            [37.2622754232890, 92.5],
            [37.5354421074913, 92.6],
            [37.8106409604765, 92.7],
            [38.0879157747109, 92.8],
            [38.3672828433530, 92.9],
            [38.6487586370634, 93.0],
            [38.9323598045428, 93.1],
            [39.2181031731066, 93.2],
            [39.5060057492828, 93.3],
            [39.7960847194508, 93.4],
            [40.0883574505059, 93.5],
            [40.3828414905592, 93.6],
            [40.6795545696683, 93.7],
            [40.9785146005998, 93.8],
            [41.2797396796223, 93.9],
            [41.5832480873356, 94.0],
            [41.8890582895238, 94.1],
            [42.1971889380439, 94.2],
            [42.5076588717463, 94.3],
            [42.8204871174169, 94.4],
            [43.1356734170444, 94.5],
            [43.4532269007933, 94.6],
            [43.7731946802309, 94.7],
            [44.0955964934429, 94.8],
            [44.4204522718399, 94.9],
            [44.7477821413291, 95.0],
            [45.0776064235086, 95.1],
            [45.4099456368884, 95.2],
            [45.7448204981374, 95.3],
            [46.0822519233575, 95.4],
            [46.4222610293795, 95.5],
            [46.7648524842960, 95.6],
            [47.1100321238767, 95.7],
            [47.4578517894897, 95.8],
            [47.8083333640097, 95.9],
            [48.1614989380900, 96.0],
            [48.5173708116435, 96.1],
            [48.8759714953568, 96.2],
            [49.2373237122154, 96.3],
            [49.6014503990568, 96.4],
            [49.9683747081399, 96.5],
            [50.3381200087373, 96.6],
            [50.7107098887471, 96.7],
            [51.0861681563238, 96.8],
            [51.4644774777379, 96.9],
            [51.8456945106636, 97.0],
            [52.2298504258182, 97.1],
            [52.6169698781841, 97.2],
            [53.0070777516770, 97.3],
            [53.4001991609428, 97.4],
            [53.7963384032341, 97.5],
            [54.1955139659081, 97.6],
            [54.5977775810307, 97.7],
            [55.0031552540216, 97.8],
            [55.4116732304895, 97.9],
            [55.8233579981897, 98.0],
            [56.2382362889975, 98.1],
            [56.6563350808985, 98.2],
            [57.0776815999947, 98.3],
            [57.5023033225344, 98.4],
            [57.9302279769487, 98.5],
            [58.3614710558691, 98.6],
            [58.7960367360875, 98.7],
            [59.2339878238856, 98.8],
            [59.6753530259086, 98.9],
            [60.1201613116576, 99.0],
            [60.5684419156891, 99.1],
            [61.0201827363171, 99.2],
            [61.4754466385789, 99.3],
            [61.9342699234648, 99.4],
            [62.3966828575413, 99.5],
            [62.8627159839001, 99.6],
            [63.3324001245137, 99.7],
            [63.8057663826036, 99.8],
            [64.2828461450333, 99.9],
            [64.7636710847136, 100.0],
            [65.2482731630281, 100.1],
            [65.7366846322742, 100.2],
            [66.2289104071614, 100.3],
            [66.7249888431958, 100.4],
            [67.2249729342922, 100.5],
            [67.7288960696859, 100.6],
            [68.2367919422165, 100.7],
            [68.7486902801413, 100.8],
            [69.2645854401074, 100.9],
            [69.7845540403602, 101.0],
            [70.3086309632503, 101.1],
            [70.8368514081213, 101.2],
            [71.3692508940610, 101.3],
            [71.9058652626695, 101.4],
            [72.4467306808550, 101.5],
            [72.9917856329978, 101.6],
            [73.5410840403052, 101.7],
            [74.0947218709625, 101.8],
            [74.6526549829023, 101.9],
            [75.2148487314527, 102.0],
            [75.7814849894029, 102.1],
            [76.3526302596229, 102.2],
            [76.9283233536206, 102.3],
            [77.5086034345367, 102.4],
            [78.0935100201942, 102.5],
            [78.6829414502392, 102.6],
            [79.2770143950766, 102.7],
            [79.8758315415944, 102.8],
            [80.4794338015639, 102.9],
            [81.0878624571485, 103.0],
            [81.7011591641220, 103.1],
            [82.3193038415422, 103.2],
            [82.9422646296881, 103.3],
            [83.5701316719803, 103.4],
            [84.2029577575264, 103.5],
            [84.8408620225773, 103.6],
            [85.4838883756420, 103.7],
            [86.1320811223294, 103.8],
            [86.7854849688132, 103.9],
            [87.4441450253101, 104.0],
            [88.1081068095890, 104.1],
            [88.7774162505025, 104.2],
            [89.4519889432590, 104.3],
            [90.1319650119906, 104.4],
            [90.8174281623696, 104.5],
            [91.5083971226215, 104.6],
            [92.2049277411651, 104.7],
            [92.9070872612228, 104.8],
            [93.6149245329917, 104.9],
            [94.3284644730808, 105.0],
            [95.0477469080230, 105.1],
            [95.7726902327039, 105.2],
            [96.5035079270421, 105.3],
            [97.2401806463577, 105.4],
            [97.9827523043988, 105.5],
            [98.7313521313099, 105.6],
            [99.4860325487439, 105.7],
            [100.246846450113, 105.8],
            [101.013847204638, 105.9],
            [101.786950965946, 106.0],
            [102.566258416394, 106.1],
            [103.351912472057, 106.2],
            [104.143968388934, 106.3],
            [104.942481919623, 106.4],
            [105.747509317599, 106.5],
            [106.559107341487, 106.6],
            [107.377333259393, 106.7],
            [108.202160295783, 106.8],
            [109.033631446969, 106.9],
            [109.871904364005, 107.0],
            [110.717038391100, 107.1],
            [111.569093403890, 107.2],
            [112.428129813925, 107.3],
            [113.294168588060, 107.4],
            [114.167274836301, 107.5],
            [115.047380524643, 107.6],
            [115.934660494594, 107.7],
            [116.829226292046, 107.8],
            [117.731141527904, 107.9],
            [118.640470381497, 108.0],
            [119.557277605379, 108.1],
            [120.481628530171, 108.2],
            [121.413444715768, 108.3],
            [122.352737982145, 108.4],
            [123.299772621300, 108.5],
            [124.254616315359, 108.6],
            [125.217337349036, 108.7],
            [126.188004614630, 108.8],
            [127.166647007886, 108.9],
            [128.153258501074, 109.0],
            [129.147930887558, 109.1],
            [130.150827684163, 109.2],
            [131.162020836620, 109.3],
            [132.181582928934, 109.4],
            [133.209587188660, 109.5],
            [134.246100476161, 109.6],
            [135.291006444544, 109.7],
            [136.344576905593, 109.8],
            [137.406887706560, 109.9],
            [138.478015364819, 110.0],
            [139.558037073284, 110.1],
            [140.647030705821, 110.2],
            [141.744841904444, 110.3],
            [142.851705803659, 110.4],
            [143.967773473984, 110.5],
            [145.093125451459, 110.6],
            [146.227842980770, 110.7],
            [147.371977931378, 110.8],
            [148.525458327717, 110.9],
            [149.688550924806, 111.0],
            [150.861339850641, 111.1],
            [152.043909970560, 111.2],
            [153.236346893039, 111.3],
            [154.438582361562, 111.4],
            [155.650792349614, 111.5],
            [156.873129023200, 111.6],
            [158.105669807031, 111.7],
            [159.348378469682, 111.8],
            [160.601315664355, 111.9],
            [161.864628834341, 112.0],
            [163.138515113946, 112.1],
            [164.423066989061, 112.2],
            [165.718377748147, 112.3],
            [167.024370492701, 112.4],
            [168.341252557993, 112.5],
            [169.669176667698, 112.6],
            [171.008239371793, 112.7],
            [172.358494725474, 112.8],
            [173.719894566408, 112.9],
            [175.092726040451, 113.0],
            [176.477089057359, 113.1],
            [177.873084385048, 113.2],
            [179.280606275316, 113.3],
            [180.699933540115, 113.4],
            [182.131198928111, 113.5],
            [183.574473643895, 113.6],
            [185.029686106670, 113.7],
            [186.497099600613, 113.8],
            [187.976869415463, 113.9],
            [189.469093184987, 114.0],
            [190.973605324796, 114.1],
            [192.490795762909, 114.2],
            [194.020774974721, 114.3],
            [195.563584267694, 114.4],
            [197.119226658428, 114.5],
            [198.687993008127, 114.6],
            [200.269997554267, 114.7],
            [201.865149637280, 114.8],
            [203.473722752899, 114.9],
            [205.095880626781, 115.0],
            [206.731607223175, 115.1],
            [208.381025062679, 115.2],
            [210.044341651645, 115.3],
            [211.721613839673, 115.4],
            [213.412891480511, 115.5],
            [215.118340553368, 115.6],
            [216.838102782721, 115.7],
            [218.572262715312, 115.8],
            [220.321096839502, 115.9],
            [222.084572768750, 116.0],
            [223.862869290638, 116.1],
            [225.656222279796, 116.2],
            [227.464517172631, 116.3],
            [229.288102490337, 116.4],
            [231.127043118483, 116.5],
            [232.981383755176, 116.6],
            [234.851438181343, 116.7],
            [236.737094726602, 116.8],
            [238.638705711238, 116.9],
            [240.556281936302, 117.0],
            [242.489993527584, 117.1],
            [244.440009912376, 117.2],
            [246.406374710028, 117.3],
            [248.389361252551, 117.4],
            [250.388940493500, 117.5],
            [252.405436674632, 117.6],
            [254.438800317087, 117.7],
            [256.489355135230, 117.8],
            [258.557037285708, 117.9],
            [260.642158317052, 118.0],
            [262.744782577016, 118.1],
            [264.865084031868, 118.2],
            [267.003250749357, 118.3],
            [269.159310023267, 118.4],
            [271.333561132949, 118.5],
            [273.526028655282, 118.6],
            [275.736912230212, 118.7],
            [277.966412399548, 118.8],
            [280.214568630910, 118.9],
            [282.481598464700, 119.0],
            [284.767682102603, 119.1],
            [287.072962862050, 119.2],
            [289.397478337724, 119.3],
            [291.741473492666, 119.4],
            [294.105109656008, 119.5],
            [296.488492292184, 119.6],
            [298.891726477667, 119.7],
            [301.315060839246, 119.8],
            [303.758587044950, 119.9],
            [306.222527285331, 120.0],
        ]
    )

    # Create an interpolation function
    interp_func = interpolate.interp1d(
        sone_phon[:, 0], sone_phon[:, 1], kind="linear", fill_value="extrapolate"
    )

    # Perform the interpolation
    return interp_func(sone)


def short_term_loudness_to_long_term_loudness(n_st):
    """
    Convert short-term loudness to long-term loudness.

    Parameters:
    - n_st: np.array, short-term loudness

    Returns:
    - np.array, long-term loudness
    """
    a_a = 0.01
    a_r = 0.00133

    n_lt = np.zeros_like(n_st)

    n_lt[0] = _agc_next_frame(0, n_st[0], a_a, a_r)
    for i in range(1, len(n_st)):
        n_lt[i] = _agc_next_frame(n_lt[i - 1], n_st[i], a_a, a_r)

    return n_lt


def monaural_specific_loudness_to_binaural_loudness_025(
    specific_loudness_left_mon, specific_loudness_right_mon
):
    """
    Convert monaural specific loudness to binaural loudness.

    Parameters:
    - specific_loudness_left_mon: np.array, left channel monaural specific loudness
    - specific_loudness_right_mon: np.array, right channel monaural specific loudness

    Returns:
    - tuple: (loudness, loudness_left, loudness_right)
    """
    g = np.arange(-18, 18.25, 0.25)
    w = np.exp(-((0.08 * g) ** 2))

    specific_loudness_left_smoothed = convolve(w, specific_loudness_left_mon) / np.sum(
        w
    )
    specific_loudness_left_smoothed = specific_loudness_left_smoothed[72:222]
    specific_loudness_right_smoothed = convolve(
        w, specific_loudness_right_mon
    ) / np.sum(w)
    specific_loudness_right_smoothed = specific_loudness_right_smoothed[72:222]

    specific_loudness_left_smoothed += 1e-13
    specific_loudness_right_smoothed += 1e-13

    p = 1.5978

    # Note: Matlab code uses sech - we convert this to 1/cosh
    inhib_left = 2 / (
        1
        + (
            1
            / np.cosh(
                specific_loudness_right_smoothed / specific_loudness_left_smoothed
            )
        )
        ** p
    )
    inhib_right = 2 / (
        1
        + (
            1
            / np.cosh(
                specific_loudness_left_smoothed / specific_loudness_right_smoothed
            )
        )
        ** p
    )

    specific_loudness_left = specific_loudness_left_mon / inhib_left
    specific_loudness_right = specific_loudness_right_mon / inhib_right

    loudness_left = np.sum(specific_loudness_left) / 4
    loudness_right = np.sum(specific_loudness_right) / 4

    loudness = loudness_left + loudness_right

    return loudness, loudness_left, loudness_right


def instantaneous_specific_loudness_to_short_term_specific_loudness(
    instantaneous_specific_loudness: np.array,
):
    """
    Convert instantaneous specific loudness to short-term specific loudness

    Parameters
    ----------
    instantaneous_specific_loudness

    Returns
    -------

    """
    a_a = 0.045
    a_r = 0.033

    short_term_specific_loudness = np.zeros_like(instantaneous_specific_loudness)

    short_term_specific_loudness[0, :] = _agc_next_frame_of_vector(
        np.zeros(150), instantaneous_specific_loudness[0, :], a_a, a_r
    )

    for i in range(1, instantaneous_specific_loudness.shape[0]):
        short_term_specific_loudness[i, :] = _agc_next_frame_of_vector(
            short_term_specific_loudness[i - 1, :],
            instantaneous_specific_loudness[i, :],
            a_a,
            a_r,
        )

    short_term_loudness = np.sum(short_term_specific_loudness, axis=1) / 4

    return short_term_specific_loudness, short_term_loudness


def _agc_next_frame(d_last_frame, d_this_input, a_a, a_r):
    """
    Calculate the next frame using Automatic Gain Control (AGC).

    Parameters:
    - d_last_frame: float, last frame value
    - d_this_input: float, current input value
    - a_a: float, attack coefficient
    - a_r: float, release coefficient

    Returns:
    - float, next frame value
    """
    if d_this_input > d_last_frame:  # attack
        return a_a * d_this_input + (1 - a_a) * d_last_frame
    else:  # release
        return a_r * d_this_input + (1 - a_r) * d_last_frame


def _agc_next_frame_of_vector(
    v_last_frame: np.array, v_this_input: np.array, a_a: float, a_r: float
):
    """
    Calculate the next frame of a vector using the Automatic Gain Control (AGC) model.

    Parameters
    ----------
    v_last_frame
    v_this_input
    a_a
    a_r

    Returns
    -------

    """
    out_this_is_larger = a_a * v_this_input + (1 - a_a) * v_last_frame  # attack
    out_last_is_larger = a_r * v_this_input + (1 - a_r) * v_last_frame  # release

    # return (v_this_input > v_last_frame) * out_this_is_larger + (v_this_input <= v_last_frame) * out_last_is_larger
    return np.where(v_this_input > v_last_frame, out_this_is_larger, out_last_is_larger)


def filtered_signal_to_monaural_instantaneous_specific_loudness(
    signal: np.array, fs: int, db_max: float
):
    """
    Calculates instantaneous specific loudness over time (left, right)

    Signal and sampling rate Fs must be pass.  Fs must be 32 kHz, reading of the wav file and resampling must be done
    before calling signal_to_loudness. Signal must contain two columns.
    db_max is the RMS SPL of a sinusoid with a peak amplitude of 1.

    Parameters
    ----------
    signal
    fs
    db_max

    Returns
    -------

    """

    npts = fs // 1000 * 64
    n_segment_duration = 1  # duration of segment in ms
    n_samples_per_segment = fs // 1000 * n_segment_duration  # 32
    n_segments_in_signal = (len(signal) - npts) // (fs // 1000 * n_segment_duration)

    # Hann windows for 6 FFTs; 1st column 64 ms, 6th column 2ms
    w_hann = np.zeros((npts, 6))
    for i in range(6):
        window_size = npts // (2**i)
        padding = (npts - window_size) // 2
        w_hann[:, i] = np.pad(hann(window_size), (padding, padding), mode="constant")

    # indices which shall be used from the ffts, 20-80 Hz from the first
    v_limiting_f = [20, 80, 500, 1250, 2540, 4050, 15000]
    v_limiting_indices = np.floor(np.array(v_limiting_f) / (fs / npts)).astype(int) + 1

    instantaneous_specific_loudness_left = np.zeros(
        (n_segments_in_signal + 1, len(np.arange(1.75, 39.25, 0.25)))
    )
    instantaneous_specific_loudness_right = np.zeros(
        (n_segments_in_signal + 1, len(np.arange(1.75, 39.25, 0.25)))
    )

    # loop: window segment, apply stationary loudness model, move window by 1ms
    for i_segment in range(n_segments_in_signal + 1):
        start = i_segment * n_samples_per_segment
        end = start + npts
        segment = signal[start:end, :]

        f_left_relevant, l_left_relevant, f_right_relevant, l_right_relevant = (
            signal_segment_to_spectrum(segment, fs, db_max, w_hann, v_limiting_indices)
        )

        if len(l_left_relevant) == 0:
            specific_loudness_left = np.zeros(150)
        else:
            excitation_levels_left = spectrum_to_excitation_pattern_025(
                f_left_relevant, l_left_relevant
            )
            specific_loudness_left = excitation_to_specific_loudness_binaural_025(
                excitation_levels_left
            )

        if len(l_right_relevant) == 0:
            specific_loudness_right = np.zeros(150)
        else:
            excitation_levels_right = spectrum_to_excitation_pattern_025(
                f_right_relevant, l_right_relevant
            )
            specific_loudness_right = excitation_to_specific_loudness_binaural_025(
                excitation_levels_right
            )

        instantaneous_specific_loudness_left[i_segment, :] = specific_loudness_left
        instantaneous_specific_loudness_right[i_segment, :] = specific_loudness_right

    return instantaneous_specific_loudness_left, instantaneous_specific_loudness_right


def excitation_to_specific_loudness_binaural_025(excitation_levels: np.array):
    """
    Calculate the specific loudness out of excitation patterns at 0.25-ERB intervals using the constant C of the model
    that accounts for binaural loudness.

    Parameters
    ----------
    excitation_levels

    Returns
    -------

    """
    # ERB-scale
    erb_c = np.arange(1.75, 39.25, 0.25)
    fc = _erb_number_to_frequency(erb_c)

    # Parameters
    c = 0.0629713609326
    g = _get_g_tvl(fc)
    alpha = _get_alpha(fc)
    a = _get_a(fc)

    # Excitation and threshold in linear power units
    excitation = 10 ** (excitation_levels / 10)
    threshold = 10 ** (_excitation_threshold_tvl(fc) / 10)

    # 3 ranges - calculate all for each case
    n1 = c * ((g * excitation + a) ** alpha - a**alpha)
    n2 = (
        c
        * (2 * excitation / (excitation + threshold)) ** 1.5
        * ((g * excitation + a) ** alpha - a**alpha)
    )
    n3 = c * (excitation / 1.0707) ** 0.2

    out = np.where(excitation > threshold, n1, n2)
    out = np.where(excitation >= 1e10, n3, out)

    return out


def _get_g_tvl(f: np.array):
    """Calculate low level gain of the cochlear amplifier relative to the gain at 500 Hz"""
    linear_threshold = 10 ** (_excitation_threshold_tvl(f) / 10)
    return 10 ** (3.63 / 10) / linear_threshold


def _excitation_threshold_tvl(f: np.array):
    """Calculate excitation threshold for given frequencies."""
    above_500 = 3.63
    threshold = np.array(
        [
            [50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 750, 800, 1000],
            [
                28.18,
                23.90,
                19.20,
                15.68,
                12.67,
                10.09,
                8.08,
                6.30,
                5.30,
                4.50,
                3.63,
                3.63,
                3.63,
                3.63,
                3.63,
            ],
        ]
    )

    below_500 = np.interp(f, threshold[0], threshold[1])

    return np.where(f < 500, below_500, above_500)


def _get_alpha(f):
    """Calculate Alpha value for given frequencies."""
    table_g2alpha = np.array(
        [
            [-25.0, -20.0, -15.0, -10.0, -5.0, 0.0],
            [0.26692, 0.25016, 0.23679, 0.22228, 0.21055, 0.20000],
        ]
    )
    g = 10 * np.log10(_get_g_tvl(f))
    return np.interp(g, table_g2alpha[0], table_g2alpha[1])


def _get_a(f):
    """Calculate A value for given frequencies."""
    table_g2a = np.array(
        [
            [
                -25,
                -24.5,
                -24,
                -23.5,
                -23,
                -22.5,
                -22,
                -21.5,
                -21,
                -20.5,
                -20,
                -19.5,
                -19,
                -18.5,
                -18,
                -17.5,
                -17,
                -16.5,
                -16,
                -15.5,
                -15,
                -14.5,
                -14,
                -13.5,
                -13,
                -12.5,
                -12,
                -11.5,
                -11,
                -10.5,
                -10,
                -9.5,
                -9.0,
                -8.5,
                -8.0,
                -7.5,
                -7.0,
                -6.5,
                -6.0,
                -5.5,
                -5.0,
                -4.5,
                -4.0,
                -3.5,
                -3.0,
                -2.5,
                -2.0,
                -1.5,
                -1.0,
                -0.5,
                0,
            ],
            [
                8.7923,
                8.6584,
                8.5245,
                8.3906,
                8.2567,
                8.1324,
                8.0095,
                7.8866,
                7.7637,
                7.6408,
                7.5179,
                7.4268,
                7.3366,
                7.2468,
                7.1562,
                7.0661,
                6.9759,
                6.8857,
                6.7984,
                6.7153,
                6.6322,
                6.542,
                6.4518,
                6.3616,
                6.2714,
                6.1834,
                6.1002,
                6.0169,
                5.9336,
                5.8504,
                5.7671,
                5.6998,
                5.6328,
                5.5705,
                5.5082,
                5.4459,
                5.3837,
                5.3214,
                5.2591,
                5.1969,
                5.1346,
                5.0806,
                5.0287,
                4.9768,
                4.9249,
                4.873,
                4.8211,
                4.7692,
                4.7173,
                4.6654,
                4.6135,
            ],
        ]
    )
    g = 10 * np.log10(_get_g_tvl(f))
    return np.interp(g, table_g2a[0], table_g2a[1])


def spectrum_to_excitation_pattern_025(f: np.array, spectrum: np.array):
    """
    Convert a spectrum to an excitation pattern

    Parameters
    ----------
    f
    spectrum

    Returns
    -------

    """

    input_levels = input_level_per_erb(f, spectrum)
    excitation_levels = output_power_at_erb_numbers_025(input_levels, f, spectrum)
    return excitation_levels


def output_power_at_erb_numbers_025(
    input_levels: np.array, f: np.array, spectrum: np.array
):
    """
    Calculate output power at ERB numbers

    Parameters
    ----------
    input_levels
    f
    spectrum

    Returns
    -------

    """
    erb_c = np.arange(1.75, 39.25, 0.25)
    fc = _erb_number_to_frequency(erb_c)
    excitation = np.zeros((len(spectrum), len(erb_c)))

    for i in range(len(erb_c)):
        pu = _get_p(fc[i]) * np.ones(len(spectrum))
        pl = _get_pl(fc[i], input_levels)
        p = np.where(f >= fc[i], pu, pl)
        g = (f - fc[i]) / fc[i]

        excitation_of_this_erb_c = _get_w(p, np.minimum(g, 4)) * 10 ** (spectrum / 10)

        excitation[:, i] = excitation_of_this_erb_c

    if excitation.shape[0] > 1:
        excitation = np.sum(excitation, axis=0)

    excitation = 10 * np.log10(excitation)

    return excitation


def input_level_per_erb(f: np.array, spectrum: np.array):
    input_levels = np.zeros((len(spectrum), len(spectrum)))

    for i in range(len(spectrum)):
        p = _get_p(f[i])
        g = (f - f[i]) / f[i]

        input_levels_of_this_tone = _get_w(p, np.minimum(g, 4))

        input_levels_of_this_tone *= 10 ** (spectrum[i] / 10)
        input_levels[i, :] = input_levels_of_this_tone

    input_levels = np.sum(input_levels, axis=0)
    input_levels = 1 * np.log10(input_levels)
    return input_levels


def _erb_number_to_frequency(erb_number: np.array):
    """
    Convert ERB number (Cam) to frequency in Hz

    Parameters
    ----------
    erb_number

    Returns
    -------

    """
    return (10 ** (erb_number / 21.366) - 1) / 0.004368


def _get_pl(f: float, x: np.array):
    """
    Calculate the pl value for a given frequency and input levels.

    Parameters
    ----------
    f
    x

    Returns
    -------

    """
    return _get_p(f) - 0.35 * (_get_p(f) / _get_p(1000)) * (x - 51)


def _get_p(f: np.array):
    """
    Calculate the parameter for slope of auditory filter

    Parameters
    ----------
    f

    Returns
    -------

    """
    return 4 * f / _get_erb(f)


def _get_erb(f: np.array):
    """
    Calculate the width of 1 Cam in Hz at frequency f in Hz.

    Parameters
    ----------
    f

    Returns
    -------

    """
    return 24.673 * (0.004368 * f + 1)


def _get_w(p, g):
    g = np.abs(g)
    return (1 + p * g) * np.exp(-p * g)


def signal_segment_to_spectrum(s, fs, db_max, w_hann, v_limiting_indices):
    """
    Calculate the spectrum for a segment of 2048x2 samples

    Returns relevant components, i.e. components that are above zero
    4 vectors are returned: frequency and level for the left ear and the same for the right ear.
    db_max is the RMS level of a full scale sinusoid
    hann windows and limiting indices for the 6 FFTs are passed so they are calculated only once
    Much is done with intensity rather than level

    Parameters
    ----------
    s
    fs
    db_max
    w_hann
    v_limiting_indices

    Returns
    -------

    """
    npts = fs // 1000 * 64  # points for FFT, 2048
    f = np.fft.rfftfreq(npts, 1 / fs)  # frequency scale for FFT
    d_hann_correction = 10 ** (3.32 / 10)  # actual filter correction

    # Window the signal
    ws = np.zeros((npts, 6, 2))
    for i in range(6):
        for j in range(2):
            ws[:, i, j] = s[:, j] * w_hann[:, i]

    # FFT (6 FFTs and combination)
    i_combined_fft = np.zeros((len(f), 2))
    for i in range(6):
        for j in range(2):
            Y = np.fft.rfft(ws[:, i, j])
            S = np.abs(Y / npts)
            S[1:-1] = 2 * S[1:-1]  # Amplitudes of sine components
            I = S**2  # intensity of components
            I *= d_hann_correction
            I *= 2**i  # correction for window length
            i_combined_fft[v_limiting_indices[i] : v_limiting_indices[i + 1], j] = I[
                v_limiting_indices[i] : v_limiting_indices[i + 1]
            ] * 10 ** (db_max / 10)

    # Take only components that are above zero
    m_indices_of_relevant_l = i_combined_fft > 0
    f_no_dc = f[1:]  # discard DC component
    m_indices_of_relevant_l = m_indices_of_relevant_l[1:, :]
    i_combined_fft = i_combined_fft[1:, :]

    i_left_relevant = i_combined_fft[:, 0] * m_indices_of_relevant_l[:, 0]
    i_right_relevant = i_combined_fft[:, 1] * m_indices_of_relevant_l[:, 1]
    f_left_relevant = f_no_dc * m_indices_of_relevant_l[:, 0]
    f_right_relevant = f_no_dc * m_indices_of_relevant_l[:, 1]

    l_left_relevant = 10 * np.log10(i_left_relevant[i_left_relevant > 0])
    l_right_relevant = 10 * np.log10(i_right_relevant[i_right_relevant > 0])
    f_left_relevant = f_left_relevant[f_left_relevant > 0]
    f_right_relevant = f_right_relevant[f_right_relevant > 0]

    return f_left_relevant, l_left_relevant, f_right_relevant, l_right_relevant


def sound_field_to_cochlea(s: np.array, field_type: str):
    filter_paths = {
        "free": os.path.join(
            os.path.dirname(__file__), "transfer_functions", "ff_32000.npy"
        ),
        "diffuse": os.path.join(
            os.path.dirname(__file__), "transfer_functions", "df_32000.npy"
        ),
        "middle": os.path.join(
            os.path.dirname(__file__), "transfer_functions", "ee_32000.npy"
        ),
    }
    assert (
        field_type in filter_paths.keys()
    ), "Field type must be one of 'free', 'diffuse', or 'middle'"
    # Load the filter coefficients
    filter_path = filter_paths[field_type]
    vec_coefficients = np.load(filter_path, allow_pickle=True)

    # Perform convolution for left channel
    out_left = signal.convolve(vec_coefficients, s[:, 0])

    # Check if input is stereo
    if s.shape[1] > 1:
        out_right = signal.convolve(vec_coefficients, s[:, 1])
    else:
        out_right = out_left

    # Combine left and right channels
    out = np.column_stack((out_left, out_right))

    # Check filter length and truncate if necessary
    N = len(vec_coefficients)
    if N == 2049:
        out = out[:-2048, :]
    else:
        raise ValueError("Please check filter!")

    return out
